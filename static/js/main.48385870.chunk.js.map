{"version":3,"sources":["memory-game/images/catEight.jpg","memory-game/images/catBack.png","memory-game/images/catOne.jpg","memory-game/images/catTwo.jpg","memory-game/images/catThree.jpg","memory-game/images/catFour.jpg","memory-game/images/catFive.jpg","memory-game/images/catSix.jpg","memory-game/images/catSeven.jpg","memory-game/LoadImages.tsx","memory-game/game-functions.ts","memory-game/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LoadImages","src","catBack","alt","className","catOne","catTwo","catThree","catFour","catFive","catSix","catSeven","catEight","defineGridArray","front","back","updateCanvas","myCanvas","buffer","getContext","drawImage","canvas","width","height","setupGameBoard","grid","cards","i","length","j","Math","floor","random","temp","shuffleCards","newGrid","pop","convertNumberToImage","num","currentImage","Image","imageSource","drawGrid","size","current","MemoryGame","useState","document","createElement","clickedOnFirstImage","x","y","firstImage","updateFirstImage","GameFunctions","updateGrid","useRef","useEffect","window","innerWidth","innerHeight","style","background","showCard","setTimeout","compareClickedImages","ref","onClick","e","rectangle","getBoundingClientRect","scaleX","scaleY","mouseX","mouseY","xCoordinate","yCoordinate","findCardClicked","clientX","left","clientY","top","Home","About","App","to","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48385870.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/catEight.7b485760.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catBack.b3baac58.png\";","module.exports = __webpack_public_path__ + \"static/media/catOne.9aa2d905.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catTwo.c4a04fec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catThree.11dabac7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catFour.b4de34fc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catFive.a55b97c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catSix.187286e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catSeven.a139895c.jpg\";","import React from 'react';\n\nimport catBack from './images/catBack.png';\nimport catOne from './images/catOne.jpg';\nimport catTwo from './images/catTwo.jpg';\nimport catThree from './images/catThree.jpg';\nimport catFour from './images/catFour.jpg';\nimport catFive from './images/catFive.jpg';\nimport catSix from './images/catSix.jpg';\nimport catSeven from './images/catSeven.jpg';\nimport catEight from './images/catEight.jpg';\n\nconst LoadImages = () => (\n  <>\n    <img src={catBack} alt='d' className='blank' />\n    <img src={catOne} alt='d' className='blank' />\n    <img src={catTwo} alt='d' className='blank' />\n    <img src={catThree} alt='d' className='blank' />\n    <img src={catFour} alt='d' className='blank' />\n    <img src={catFive} alt='d' className='blank' />\n    <img src={catSix} alt='d' className='blank' />\n    <img src={catSeven} alt='d' className='blank' />\n    <img src={catEight} alt='d' className='blank' />\n  </>\n);\n\nexport default LoadImages;\n","import catBack from './images/catBack.png';\nimport catOne from './images/catOne.jpg';\nimport catTwo from './images/catTwo.jpg';\nimport catThree from './images/catThree.jpg';\nimport catFour from './images/catFour.jpg';\nimport catFive from './images/catFive.jpg';\nimport catSix from './images/catSix.jpg';\nimport catSeven from './images/catSeven.jpg';\nimport catEight from './images/catEight.jpg';\n\nconst defineGridArray = () => [\n  [\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n  ],\n  [\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n  ],\n  [\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n  ],\n  [\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n    { front: 0, back: 0 },\n  ],\n];\n\nconst updateCanvas = (\n  myCanvas: HTMLCanvasElement,\n  buffer: CanvasRenderingContext2D,\n) => {\n  const ctx = myCanvas!.getContext('2d');\n  ctx!.drawImage(\n    buffer.canvas,\n    0,\n    0,\n    buffer!.canvas.width,\n    buffer!.canvas.height,\n    0,\n    0,\n    myCanvas.width,\n    myCanvas.height,\n  );\n};\n\n// shuffle cards using Durstenfed Shuffle\n// see https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nconst shuffleCards = (cards: any) => {\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = cards[i];\n    cards[i] = cards[j];\n    cards[j] = temp;\n  }\n};\n\nconst setupGameBoard = (grid: any) => {\n  const cards = [7, 7, 8, 8, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6];\n  shuffleCards(cards);\n  const newGrid = grid;\n\n  for (let i = 0; i < newGrid.length; i++) {\n    for (let j = 0; j < newGrid[i].length; j++) {\n      if (cards.length) {\n        newGrid[i][j].front = cards[cards.length - 1];\n        cards.pop();\n      }\n    }\n  }\n  return newGrid;\n};\n\nconst convertNumberToImage = (num: number) => {\n  const currentImage = new Image();\n  let imageSource = catEight;\n\n  switch (num) {\n    case 0:\n      imageSource = catBack;\n      break;\n    case 1:\n      imageSource = catOne;\n      break;\n    case 2:\n      imageSource = catTwo;\n      break;\n    case 3:\n      imageSource = catThree;\n      break;\n    case 4:\n      imageSource = catFour;\n      break;\n    case 5:\n      imageSource = catFive;\n      break;\n    case 6:\n      imageSource = catSix;\n      break;\n    case 7:\n      imageSource = catSeven;\n      break;\n    default:\n    case 8:\n      imageSource = catEight;\n      break;\n  }\n  currentImage.src = imageSource;\n  return currentImage;\n};\n\nconst drawGrid = (\n  myCanvas: any,\n  buffer: null | CanvasRenderingContext2D,\n  grid: any,\n  size: number,\n) => {\n  if (myCanvas === null || buffer === null) return;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      buffer!.drawImage(\n        convertNumberToImage(grid[i][j].back),\n        i * size,\n        j * size,\n        90,\n        90,\n      );\n    }\n  }\n\n  updateCanvas(myCanvas.current, buffer);\n};\n\nexport {\n  defineGridArray,\n  updateCanvas,\n  setupGameBoard,\n  drawGrid,\n  convertNumberToImage,\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\n// images seem to not be loaded until needed, this gets around that\nimport LoadImages from './LoadImages';\n\nimport * as GameFunctions from './game-functions';\nimport './style.css';\n\nconst MemoryGame = () => {\n  const [buffer, setBuffer] = useState(\n    document.createElement('canvas').getContext('2d'),\n  );\n  const [firstImage, updateFirstImage] = useState({\n    clickedOnFirstImage: false,\n    x: 0,\n    y: 0,\n  });\n  const [grid, updateGrid] = useState(GameFunctions.defineGridArray);\n  const size = 100;\n\n  const myCanvas = useRef<HTMLCanvasElement>(null);\n\n  // Initial Setup\n  useEffect(() => {\n    myCanvas.current!.width = window.innerWidth * 0.7;\n    myCanvas.current!.height = window.innerHeight * 0.7;\n    // myCanvas.current!.style.background = `url(${bgCover})`;\n    myCanvas.current!.style.background = 'white';\n\n    buffer!.canvas.height = grid.length * size;\n    buffer!.canvas.width = grid[0].length * size;\n\n    updateGrid(GameFunctions.setupGameBoard(grid));\n    GameFunctions.drawGrid(myCanvas, buffer, grid, size);\n  }, [buffer, grid]);\n\n  const compareClickedImages = (x: number, y: number) => {\n    if (firstImage.clickedOnFirstImage) {\n      if (x === firstImage.x && y === firstImage.y) {\n        updateFirstImage({ clickedOnFirstImage: false, x, y });\n        return;\n      }\n      if (grid[x][y].front === grid[firstImage.x][firstImage.y].front) {\n        const newGrid = grid;\n        newGrid[x][y].back = newGrid[x][y].front;\n        newGrid[firstImage.x][firstImage.y].back = newGrid[x][y].front;\n        updateGrid(newGrid);\n      }\n      setTimeout(\n        () => GameFunctions.drawGrid(myCanvas, buffer, grid, size),\n        1000,\n      );\n      updateFirstImage({ clickedOnFirstImage: false, x, y });\n      return;\n    }\n\n    updateFirstImage({\n      clickedOnFirstImage: true,\n      x,\n      y,\n    });\n  };\n\n  const showCard = (x: number, y: number) => {\n    buffer!.drawImage(\n      GameFunctions.convertNumberToImage(grid[x][y].front),\n      x * size,\n      y * size,\n      90,\n      90,\n    );\n    GameFunctions.updateCanvas(myCanvas.current!, buffer!);\n    buffer!.drawImage(\n      GameFunctions.convertNumberToImage(grid[x][y].back),\n      x * size,\n      y * size,\n      90,\n      90,\n    );\n    compareClickedImages(x, y);\n  };\n\n  const findCardClicked = (mouseX: number, mouseY: number) => {\n    if (\n      mouseX >= myCanvas.current!.width ||\n      mouseX <= 0 ||\n      mouseY >= myCanvas.current!.height ||\n      mouseY <= 0\n    ) {\n      return;\n    }\n    const xCoordinate = Math.floor(mouseX / 100);\n    const yCoordinate = Math.floor(mouseY / 100);\n\n    if (\n      grid[xCoordinate][yCoordinate].front ===\n      grid[xCoordinate][yCoordinate].back\n    ) {\n      return;\n    }\n    showCard(xCoordinate, yCoordinate);\n  };\n\n  const handleClick = (e: any) => {\n    const rectangle = myCanvas.current!.getBoundingClientRect();\n    const { canvas } = buffer!;\n    const scaleX = canvas.width / rectangle.width;\n    const scaleY = canvas.height / rectangle.height;\n\n    const mouseX = (e.clientX - rectangle.left) * scaleX;\n    const mouseY = (e.clientY - rectangle.top) * scaleY;\n\n    findCardClicked(mouseX, mouseY);\n  };\n\n  return (\n    <div className='memory-game'>\n      <h1 className='memory-game__title'>Cat Memory Game</h1>\n      <canvas\n        className='memory-game-canvas'\n        ref={myCanvas}\n        onClick={handleClick}\n      />\n      <LoadImages />\n    </div>\n  );\n};\n\nexport default MemoryGame;\n","import React from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport MemoryGame from './memory-game/Main';\nimport './App.css';\n\nconst Home = () => <h1>Welcome Home</h1>;\nconst About = () => <h1>About this page</h1>;\n\nconst App = () => (\n  <Router>\n    <>\n      <nav>\n        <ul>\n          <li>\n            <Link to='/'>Home</Link>\n          </li>\n          <li>\n            <Link to='/about'>About</Link>\n          </li>\n          <li>\n            <Link to='/memory-game'>Cat Memory Game</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <main>\n        <Switch>\n          <Route path='/about'>\n            <About />\n          </Route>\n          <Route path='/memory-game'>\n            <MemoryGame />\n          </Route>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </main>\n    </>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}